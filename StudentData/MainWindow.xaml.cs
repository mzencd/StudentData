using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.SQLite;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using static StudentData.DataModel;

namespace StudentData
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public static DataSet StudentDataSet;

        DataTableCollection dataTableCollection;
        DataTable dataTable;

        public MainWindow()
        {
            InitializeComponent();

            Loaded += MainWindow_Loaded;

            DataSourceGrid.Loaded += DataSourceGrid_Loaded;
            DataSourceGrid.AutoGeneratedColumns += DataSourceGrid_AutoGeneratedColumns;

            Closing += MainWindow_Closing;
        }

        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            CommandBindings.Add(new CommandBinding(ApplicationCommands.Open, Open_Executed, Open_CanExecute));
            CommandBindings.Add(new CommandBinding(ApplicationCommands.Save, Save_Executed, Save_CanExecute));
            CommandBindings.Add(new CommandBinding(ApplicationCommands.Close, Close_Executed, Close_CanExecute));
            CommandBindings.Add(new CommandBinding(ApplicationCommands.Help, About_Executed, About_CanExecute));

            if (dataTable == null)
            {

                using (DataModel dataModel = new DataModel())
                {
                    VerifyDatabaseConnection(dataModel);

                    SqlResult result = dataModel.SqlQuery("SELECT * FROM StudentList", null, "StudentList");
                    if (result != null && result.DataSet != null)
                    {
                        dataTable = result.DataSet.Tables[0];
                        DataSourceGrid.ItemsSource = dataTable.DefaultView;

                        StudentDataSet = result.DataSet;
                    }
                }
            }

            List<string> columnNames = new List<string>();
            foreach (DataGridColumn column in DataSourceGrid.Columns)
            {
                if(column.Visibility == Visibility.Visible)
                {
                    columnNames.Add(column.Header.ToString());
                }
            }
            columnName.ItemsSource = columnNames;
        }

        private void DataSourceGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGrid dgrid = sender as DataGrid;
            dgrid.Columns[0].Visibility = Visibility.Hidden;
        }

        private void DataSourceGrid_Loaded(object sender, RoutedEventArgs e)
        {
            DataView dataView = (sender as DataGrid).ItemsSource as DataView;
            string rowCount = dataView?.Count.ToString() + " row(s)" ?? "Ready";
            (statusBar.Items[0] as StatusBarItem).Content = rowCount;

            if (dataView != null)
            {
                dataView.ListChanged += DataView_ListChanged;
            }
        }

        private void DataView_ListChanged(object sender, System.ComponentModel.ListChangedEventArgs e)
        {
            DataView dataView = sender as DataView;
            string rowCount = dataView?.Count.ToString() + " row(s)" ?? "Ready";
            (statusBar.Items[0] as StatusBarItem).Content = rowCount;
        }

        private void DataSourceGrid_RowEditEnding(object sender, DataGridRowEditEndingEventArgs e)
        {
            DataSourceGrid_Loaded(sender, null);
        }

        public void Open_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            btnBrowse_Click(null, null);
        }

        public void Open_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = true;
        }

        public void Save_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            Cursor original = this.Cursor;
            this.Cursor = Cursors.Wait;

            try
            {
                using (DataModel dataModel = new DataModel())
                {
                    DataTable changeTable = dataTable.GetChanges();

                    SqlResult result = dataModel.UpdateOnDataTable(changeTable, "SELECT * FROM StudentList", null);
                    if (result == null || result.HasError)
                    {
                        MessageBox.Show(result.Message, "Erro", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                    }
                    else
                    {
                        dataTable.AcceptChanges();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error");
            }
            finally
            {
                this.Cursor = original;
            }
        }

        public void Save_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = dataTable != null && dataTable.GetChanges() != null;
        }

        public void Close_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            Application.Current.Shutdown(0);
        }

        public void Close_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = true;
        }

        public void About_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            AboutWindow aboutWindow = new AboutWindow();
            aboutWindow.Owner = this;
            aboutWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;
            aboutWindow.ShowDialog();
        }

        public void About_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = true;
        }

        private void btnBrowse_Click(object sender, RoutedEventArgs e)
        {
            if(dataTable.GetChanges() != null)
            {
                MessageBoxResult result = MessageBox.Show("Data has been modified, save changes?", "Information", MessageBoxButton.YesNoCancel, MessageBoxImage.Question);
                if (result == MessageBoxResult.Cancel)
                    return;
                else if (result == MessageBoxResult.Yes)
                    Save_Executed(null, null);
                else if (result == MessageBoxResult.No)
                    dataTable.RejectChanges();
            }

            OpenFileDialog openFile = new OpenFileDialog();
            openFile.Filter = "Excel Files(*.xls)|*.xls|Excel Files(*.xlsx)|*.xlsx";

            if (openFile.ShowDialog() == true)
            {
                txtSourceFile.Text = openFile.FileName;

                string sourceFile = openFile.FileName;
                DataSet dataSet = SolutionAPI.ReadExcel(sourceFile);

                dataTableCollection = dataSet?.Tables;
                PopulateRecords(dataTableCollection);

                StudentDataSet = dataSet;
            }
        }

        protected void PopulateRecords(DataTableCollection dataTableCollection)
        {
            Cursor original = this.Cursor;
            this.Cursor = Cursors.Wait;

            try
            {
                for(int i = 0; i < dataTable.Rows.Count; i++)
                {
                    DataRow row = dataTable.Rows[i];
                    if (row.RowState == DataRowState.Deleted || row.RowState == DataRowState.Detached)
                        continue;

                    row.Delete();
                }

                int totalIndex = 0;

                foreach (DataTable table in dataTableCollection)
                {
                    bool isbegine = false;
                    int[] mapArray = new int[10];
                    mapArray[0] = 0;
                    mapArray[1] = 1;
                    mapArray[2] = 2;

                    string Level = string.Empty;
                    string Classroom = string.Empty;

                    foreach (DataRow row in table.Rows)
                    {
                        if (isbegine)
                        {
                            totalIndex++;

                            DataRow newRow = dataTable.NewRow();

                            newRow[1] = Level;
                            newRow[2] = Classroom;

                            for (int i = 3; i < newRow.ItemArray.Length; i++)
                            {
                                int index = mapArray[i];
                                newRow[i] = row.ItemArray.GetValue(index);
                            }

                            newRow[3] = totalIndex; // Overwrite, update according to the new sequence

                            dataTable.Rows.Add(newRow);
                        }
                        else
                        {
                            for(int m = 0; m < row.ItemArray.Length; m++)
                            {
                                object item = row.ItemArray[m];
                                if (item == null)
                                {
                                    continue;
                                }

                                if(item is string title) 
                                {
                                    if(title == "المستوى")
                                    {
                                        // The value is on the previous row, ignor this
                                        // in that our table will show class room prefix actually

                                        //int n = 1;
                                        //do
                                        //{
                                        //    Level = row.ItemArray[m - n].ToString();
                                        //    n++;
                                        //}
                                        //while (string.IsNullOrEmpty(Level) && m >= n);

                                        continue;
                                    }
                                    else if(title == "القسم")
                                    {
                                        int n = 1;
                                        string strTemp = string.Empty;
                                        do
                                        {
                                            strTemp = row.ItemArray[m - n].ToString();
                                            n++;
                                        }
                                        while (string.IsNullOrEmpty(strTemp) && m>=n);

                                        if(strTemp.Contains("-"))
                                        {
                                            int index = strTemp.IndexOf("-");
                                            Level = strTemp.Substring(0, index);
                                            Classroom = strTemp.Substring(++index, strTemp.Length - index);
                                        }
                                        else
                                        {
                                            Classroom = strTemp;
                                        }

                                        continue;
                                    }
                                }

                                if (item is string str && str == "ر.ت")
                                {
                                    isbegine = true;

                                    for (int i = 0; i < row.ItemArray.Length; i++)
                                    {
                                        string header = row.ItemArray[i].ToString().Trim();
                                        switch (header)
                                        {
                                            case "ر.ت":
                                                {
                                                    mapArray[3] = i;
                                                    break;
                                                }
                                            case "الرمز":
                                                {
                                                    mapArray[4] = i;
                                                    break;
                                                }
                                            case "النسب":
                                                {
                                                    mapArray[5] = i;
                                                    break;
                                                }
                                            case "الإسم":
                                                {
                                                    mapArray[6] = i;
                                                    break;
                                                }
                                            case "النوع":
                                                {
                                                    mapArray[7] = i;
                                                    break;
                                                }
                                            case "تاريخ الإزدياد":
                                                {
                                                    mapArray[8] = i;
                                                    break;
                                                }
                                            case "مكان الازدياد":
                                                {
                                                    mapArray[9] = i;
                                                    break;
                                                }
                                            default:
                                                {
                                                    break;
                                                }
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error:");
            }
            finally
            {
                this.Cursor = original;
            }
        }

        private void showReport_Click(object sender, RoutedEventArgs e)
        {
            Reporter reporter = new Reporter() { reportView = DataSourceGrid.ItemsSource as DataView };
            reporter.ShowDialog();
        }

        private void VerifyDatabaseConnection(DataModel dataModel)
        {
            string createTableQuery = "CREATE TABLE IF NOT EXISTS StudentList" +
                " (SystemID INTEGER PRIMARY KEY AUTOINCREMENT, " +
                "Level TEXT, Classroom TEXT, Rate TEXT, Code TEXT, Percentage TEXT, StudentName TEXT, " +
                "Gender TEXT, BirthDate DATE, BirthPlace TEXT);";

            SqlResult result = dataModel.ExecuteNonQuery(createTableQuery, null);
            if (result.HasError)
            {
                MessageBox.Show(result.Message, "Error");
            }
        }

        private void SearchButton_Click(object sender, RoutedEventArgs e)
        {
            Cursor original = this.Cursor;
            this.Cursor = Cursors.Wait;

            string column = columnName.Text;
            string value = columnValue.Text;

            DataView dataView = DataSourceGrid.ItemsSource as DataView;
            if (dataView == null)
                return;

            dataView.RowFilter = string.IsNullOrEmpty(value) ? $"{column} = ''" : $"{column} = '{value}'";

            this.Cursor = original;
        }

        private void NormalButton_Click(object sender, RoutedEventArgs e)
        {
            Cursor original = this.Cursor;
            this.Cursor = Cursors.Wait;

            DataView dataView = DataSourceGrid.ItemsSource as DataView;
            if (dataView == null)
                return;

            dataView.RowFilter = string.Empty;
            columnName.SelectedIndex = -1;
            columnValue.Text = string.Empty;

            this.Cursor = original;
        }

        private void MainWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (dataTable.GetChanges() != null)
            {
                MessageBoxResult result = MessageBox.Show("Data has been modified, save changes?", "Information", MessageBoxButton.YesNo, MessageBoxImage.Question);
                if (result == MessageBoxResult.Yes)
                    Save_Executed(null, null);
            }
        }
    }
}
